
//Add Key-Value Pairs to JavaScript Objects
/*A foods object has been created with three entries. Using the syntax of your choice, 
add three more entries to it: bananas with a value of 13, grapes with a value of 35, and strawberries with a value of 27.
*/

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28
};
// Only change code below this line
foods.bananas=13;
foods.grapes=35;
foods.strawberries=27;
// Only change code above this line
console.log(foods);   //{ apples: 25, oranges: 32, plums: 28, bananas: 13, grapes: 35, strawberries: 27 }



//Modify an Object Nested Within an Object
/*Here we've defined an object userActivity, which includes another object nested within it. Set the value of the online key to 45.
*/
let userActivity = {
  id: 23894201352,
  date: 'January 1, 2017',
  data: {
    totalUsers: 51,
    online: 42
  }
};
// Only change code below this line
userActivity.data.online=45;
// Only change code above this line
console.log(userActivity);    //{ id: 23894201352, date: 'January 1, 2017', data: { totalUsers: 51, online: 45 } }



//Access Property Names with Bracket Notation
/*We've defined a function, checkInventory, which receives a scanned item as an argument. 
Return the current value of the scannedItem key in the foods object. 
You can assume that only valid keys will be provided as an argument to checkInventory.
*/
let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};
function checkInventory(scannedItem) {
  // Only change code below this line
return foods[scannedItem];
  // Only change code above this line
}
console.log(checkInventory("apples"));    //25



//Use the delete Keyword to Remove Object Properties
/*Use the delete keyword to remove the oranges, plums, and strawberries keys from the foods object.
*/
let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};
// Only change code below this line
delete foods.oranges;
delete foods.plums;
delete foods.strawberries;
// Only change code above this line
console.log(foods);   //{ apples: 25, bananas: 13, grapes: 35 }



//Check if an Object has a Property
/*We've created an object, users, with some users in it and a function isEveryoneHere, 
which we pass the users object to as an argument. Finish writing this function so that it returns true only 
if the users object contains all four names, Alan, Jeff, Sarah, and Ryan, as keys, and false otherwise.
*/
let users = {
  Alan: {
    age: 27,
    online: true
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: true
  },
  Ryan: {
    age: 19,
    online: true
  }
};
function isEveryoneHere(obj) {
  return obj.hasOwnProperty('Alan') && obj.hasOwnProperty('Jeff') && obj.hasOwnProperty('Sarah') && obj.hasOwnProperty('Ryan');
  //OR 
  //return ["Alan", "Jeff", "Sarah", "Ryan"].every(name =>
  //obj.hasOwnProperty(name));
}
console.log(isEveryoneHere(users));   //true



//Iterate Through the Keys of an Object with a for...in Statement
/*We've defined a function countOnline which accepts one argument (a users object). 
Use a for...in statement within this function to loop through the users object passed into the function 
and return the number of users whose online property is set to true. An example of a users object 
which could be passed to countOnline is shown below. Each user will have an online property with either a true or false value.
{
  Alan: {
    online: false
  },
  Jeff: {
    online: true
  },
  Sarah: {
    online: false
  }
}
*/
function countOnline(usersObj) {
  // Only change code below this line
  let x=0;
  for (let user in usersObj) {
  if(usersObj[user].online==true) {
    x++;
  }
}
return x;
  // Only change code above this line
}



//Generate an Array of All Object Keys with Object.keys()
/*Finish writing the getArrayOfUsers function so that it returns an array containing all the properties in the object it receives as an argument.
*/
let users = {
  Alan: {
    age: 27,
    online: false
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: false
  },
  Ryan: {
    age: 19,
    online: true
  }
};
function getArrayOfUsers(obj) {
  // Only change code below this line
  return Object.keys(obj);
  // Only change code above this line
}
console.log(getArrayOfUsers(users));    //[ 'Alan', 'Jeff', 'Sarah', 'Ryan' ]



//Modify an Array Stored in an Object
/*Take a look at the object we've provided in the code editor. The user object contains three keys. 
The data key contains five keys, one of which contains an array of friends. 
From this, you can see how flexible objects are as data structures. We've started writing a function addFriend. 
Finish writing it so that it takes a user object and adds the name of the friend argument to the array stored in user.data.friends and returns that array.
*/
let user = {
  name: 'Kenneth',
  age: 28,
  data: {
    username: 'kennethCodesAllDay',
    joinDate: 'March 26, 2016',
    organization: 'freeCodeCamp',
    friends: [
      'Sam',
      'Kira',
      'Tomo'
    ],
    location: {
      city: 'San Francisco',
      state: 'CA',
      country: 'USA'
    }
  }
};
function addFriend(userObj, friend) {
  // Only change code below this line
  userObj.data.friends.push(friend);
  return userObj.data.friends;
  // Only change code above this line
}
console.log(addFriend(user, 'Pete'));   //[ 'Sam', 'Kira', 'Tomo', 'Pete' ]
