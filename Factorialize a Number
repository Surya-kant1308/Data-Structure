/*Return the factorial of the provided integer.
If the integer is represented with the letter n, a factorial is the product of all positive integers less than or equal to n.
Factorials are often represented with the shorthand notation n!
For example: 5! = 1 * 2 * 3 * 4 * 5 = 120
Only integers greater than or equal to zero will be supplied to the function.
*/

function factorialize(num) {
  if(num===0) {
    return 1;
  }
  return num*factorialize(num-1);
}

factorialize(5); //120

//OR

function factorialize(num) {
  for (var product = 1; num > 0; num--) {
    product *= num;
  }
  return product;
}

factorialize(5);

//OR

function factorialize(num, factorial = 1) {
  if (num == 0) {
    return factorial;
  } else {
    return factorialize(num - 1, factorial * num);
  }
}

factorialize(5);

/*In this solution, we use Tail Recursion 342 to optimize the the memory use.

In traditional head recursion, the typical model is that you perform your recursive calls first, 
and then you take the return value of the recursive call and calculate the result. 
In this manner, you don’t get the result of your calculation until you have returned from every recursive call.

In tail recursion, you perform your calculations first, and then you execute the recursive call, 
passing the results of your current step to the next recursive step. This results in the last statement being 
in the form of (return (recursive-function params)).

In this solution, with each evaluation of the recursive call, the factorial is updated. 
This is different from the head-recursive solution where all evaluation calculations are stored on the stack until the base case is reached.
*/

//OR

function factorialize(num, factorial = 1) {
  return num < 0 ? 1 : (
    new Array(num)
      .fill(undefined)
      .reduce((product, val, index) => product * (index + 1), 1)
  );
}
factorialize(5);

/*In this solution, we used “reduce” function to find the factorial value of the number.
We have created an array which has length num. And we filled all elements of the array as undefined. 
In this case, we have to do this because empty arrays couldn’t reducible. You can fill the array as your wish by the way. 
This depends on your engineering sight completely.
In reduce function’s accumulator is calling product this is also our final value. 
We are multiplying our index value with the product to find factorial value.
We’re setting product’s initial value to 1 because if it was zero products gets zero always.
Also the factorial value can’t calculate for negative numbers, first of all, we’re testing this.
*/
